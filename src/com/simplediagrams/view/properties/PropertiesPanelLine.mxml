<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:components="com.simplediagrams.view.components.*"
	creationComplete="onCC()"
	>
	
	<s:layout>
		<s:HorizontalLayout paddingTop="3" paddingLeft="20" />
	</s:layout>	
	
	<fx:Script>
		<![CDATA[
		
			import mx.collections.ArrayCollection
			import com.simplediagrams.model.DiagramModel
			import com.simplediagrams.model.SettingsModel
			import com.simplediagrams.model.SDLineModel
			import com.simplediagrams.events.LineStyleEvent
			import com.simplediagrams.util.Logger
			import mx.events.PropertyChangeEvent;
			
			[Autowire(bean="diagramModel")]
			public var diagramModel:DiagramModel
			
			[Autowire(bean="settingsModel")]
			public var settingsModel:SettingsModel
			
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineNone.png')]
			public var lineNone:Class
			
			
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineStartVLine.png')]
			public var lineStartVLine:Class
			
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineStartArrow.png')]
			public var lineStartArrow:Class
						
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineStartClosedArrow.png')]
			public var lineStartClosedArrow:Class
			
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineStartCircle.png')]
			public var lineStartCircle:Class
			
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineStartSolidCircle.png')]
			public var lineStartSolidCircle:Class
			
			
					
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineEndVLine.png')]
			public var lineEndVLine:Class
			
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineEndArrow.png')]
			public var lineEndArrow:Class
						
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineEndClosedArrow.png')]
			public var lineEndClosedArrow:Class
			
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineEndCircle.png')]
			public var lineEndCircle:Class
			
			[Bindable]
			[Embed(source='assets/img/lineEndings/lineEndSolidCircle.png')]
			public var lineEndSolidCircle:Class
						
			
			[Bindable]			
			protected var _lineBeginAC:ArrayCollection = new ArrayCollection( [ {source:lineNone, lineStyle: SDLineModel.NONE_STYLE},
																				{source:lineStartVLine, lineStyle: SDLineModel.STOP_LINE_STYLE},
																				{source:lineStartArrow, lineStyle: SDLineModel.ARROW_STYLE},
																				{source:lineStartClosedArrow, lineStyle: SDLineModel.SOLID_ARROW_STYLE},
																				{source:lineStartCircle, lineStyle: SDLineModel.CIRCLE_LINE_STYLE},
																				{source:lineStartSolidCircle, lineStyle: SDLineModel.SOLID_CIRCLE_LINE_STYLE}
																			 ]);
			
			[Bindable]
			protected var _lineEndAC:ArrayCollection = new ArrayCollection( [   {source:lineNone, lineStyle: SDLineModel.NONE_STYLE},
																				{source:lineEndVLine, lineStyle: SDLineModel.STOP_LINE_STYLE},
																				{source:lineEndArrow, lineStyle: SDLineModel.ARROW_STYLE},
																				{source:lineEndClosedArrow, lineStyle: SDLineModel.SOLID_ARROW_STYLE},
																				{source:lineEndCircle, lineStyle: SDLineModel.CIRCLE_LINE_STYLE},
																				{source:lineEndSolidCircle, lineStyle: SDLineModel.SOLID_CIRCLE_LINE_STYLE}
																			 ]);
																			 
			[Bindable]
			protected var _lineWeightsAC:ArrayCollection = new ArrayCollection ( [ 	{label:"1", data:1 },
																					{label:"2", data:2 },
																					{label:"3", data:3 },
																					{label:"4", data:4 },
																					{label:"5", data:5 },
																					{label:"6", data:6 },
																					{label:"7", data:7 },
																					{label:"8", data:8 },
																					{label:"9", data:9 },
																					{label:"10", data:10 } ] )
			
				
				
			// this flag is set to true when I set the properties of the pulldowns directly from the model 
			// (e.g. the model was changed due to something other than a control located here)
			// When this happens, we don't want the controls to then throw events which change the model again (to the same value)
			// because if this happens, it messes up undo/redo by adding extra commands
				
			// this flag is also set when initing controls 
			protected var _launchControlEvents:Boolean = false 
			
				
				
			protected var sdLineModel:SDLineModel
																			 
			
			public function resetProperties():void
			{
				
				if (sdLineModel == diagramModel.selectedArray[0]) return
				
				Logger.debug("resetProperties()", this)
				
				if (sdLineModel)
				{
					sdLineModel.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onModelChange)
				}
				
				//get the settings for the currently selected line
				if (diagramModel.selectedArray.length==1 && (diagramModel.selectedArray[0] is SDLineModel))
				{
					sdLineModel = SDLineModel(diagramModel.selectedArray[0])			
					initControls()
					sdLineModel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onModelChange)	
				}
				else
				{
					//leave current settings
				}
				
			}
			
			protected function onCC():void
			{
				_launchControlEvents = false
				ddlLineWeight.selectedIndex = 0
				_launchControlEvents = true
			}
			
			
			
			protected function onModelChange(event:PropertyChangeEvent):void
			{
				_launchControlEvents = false
				switch (event.property)
				{
				
					case "startLineStyle":
						ddlLineStart.selectedIndex = sdLineModel.startLineStyle 
						//update preferences too so future lines are same
						settingsModel.defaultStartLineStyle = sdLineModel.startLineStyle
						break
					
					case "endLineStyle":
						ddlLineEnd.selectedIndex = sdLineModel.endLineStyle
						settingsModel.defaultEndLineStyle = sdLineModel.endLineStyle
						break
					
					case "lineWeight":
						ddlLineWeight.selectedIndex = sdLineModel.lineWeight - 1
						settingsModel.defaultLineWeight = sdLineModel.lineWeight - 1
						break
				}
				_launchControlEvents = true
			}
			
			protected function initControls():void
			{
				if (sdLineModel)
				{
					ddlLineWeight.selectedIndex = sdLineModel.lineWeight - 1
					ddlLineStart.selectedIndex = sdLineModel.startLineStyle 
					ddlLineEnd.selectedIndex = sdLineModel.endLineStyle					
				}	
				
			}
			
		
			
			
			protected function onLineStartChange():void
			{
				if (!_launchControlEvents) return 
				if (ddlLineStart.selectedIndex==-1) return
				var event:LineStyleEvent = new LineStyleEvent(LineStyleEvent.LINE_START_STYLE_CHANGE, true)
				event.lineStyle = ddlLineStart.selectedItem.lineStyle
				dispatchEvent(event)
				
			}
			
																			 
			protected function onLineEndChange():void
			{				
				if (!_launchControlEvents) return 
				if (ddlLineEnd.selectedIndex==-1) return
				var event:LineStyleEvent = new LineStyleEvent(LineStyleEvent.LINE_END_STYLE_CHANGE, true)
				event.lineStyle = ddlLineEnd.selectedItem.lineStyle
				dispatchEvent(event)
			}
			
			protected function onLineWeightChange():void
			{
				if (!_launchControlEvents) return 
				if (ddlLineWeight.selectedIndex==-1) return
				var event:LineStyleEvent = new LineStyleEvent(LineStyleEvent.LINE_WEIGHT_CHANGE, true)
				event.lineWeight = ddlLineWeight.selectedItem.data
				dispatchEvent(event)
			}
						
		]]>
	</fx:Script>
	
	<s:Label text="start:" paddingTop="7" paddingLeft="3" />
	
	<s:DropDownList id="ddlLineStart"
            requireSelection="true"
			dataProvider="{_lineBeginAC}"
            skinClass="com.simplediagrams.view.skins.CustomDropDownListSkin"
            itemRenderer="com.simplediagrams.view.itemRenderers.LineEndingItemRenderer"
            horizontalCenter="0"
            height="23"
            width="60"
            change="onLineStartChange()"
            />

			
	<s:Label text="end:" paddingTop="7" paddingLeft="10" />
	
	<s:DropDownList id="ddlLineEnd"
            requireSelection="true"
			dataProvider="{_lineEndAC}"
            skinClass="com.simplediagrams.view.skins.CustomDropDownListSkin"
            itemRenderer="com.simplediagrams.view.itemRenderers.LineEndingItemRenderer"
            horizontalCenter="0"
            height="23"
            width="60"
            change="onLineEndChange()"
            />
            
            
	<s:Label text="weight:" paddingTop="7" paddingLeft="10" />
	
	<s:DropDownList id="ddlLineWeight"
			dataProvider="{_lineWeightsAC}"
			change="onLineWeightChange()"
			height="23"
			width="45"
			/>
	
	
</s:Group>
